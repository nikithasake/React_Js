{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nikit\\\\Desktop\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEvent.js\";\nimport EventForm from \"../components/EventForm\";\nimport { json } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n}\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'could not save event'\n    }, {\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["EventForm","json","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","message","status","$RefreshReg$"],"sources":["C:/Users/nikit/Desktop/12-adv-starting-project/frontend/src/pages/NewEvent.js"],"sourcesContent":["import EventForm from \"../components/EventForm\";\r\nimport { json } from \"react-router-dom\";\r\n\r\nfunction NewEventPage(){\r\n    return <EventForm/>\r\n}\r\n\r\nexport default NewEventPage;\r\n\r\nexport async function action({request,params}){\r\n    const data=await request.formData();\r\n    const eventData={\r\n        title:data.get('title'),\r\n        image:data.get('image'),\r\n        date:data.get('date'),\r\n        description:data.get('description'),\r\n    }\r\n    const response=await fetch('http://localhost:8080/events',{\r\n    method:'POST',\r\n    headers:{\r\n        'Content-Type':'application/json'\r\n    },\r\n    body:JSON.stringify(eventData),\r\n});\r\n\r\nif(!response.ok){\r\n    throw json({ message:'could not save event'},{status:500});\r\n}\r\n}"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,YAAYA,CAAA,EAAE;EACnB,oBAAOD,OAAA,CAACH,SAAS;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAE;AACvB;AAACC,EAAA,GAFQL,YAAY;AAIrB,eAAeA,YAAY;AAE3B,OAAO,eAAeM,MAAMA,CAAAC,IAAA,EAAkB;EAAA,IAAjB;IAACC,OAAO;IAACC;EAAM,CAAC,GAAAF,IAAA;EACzC,MAAMG,IAAI,GAAC,MAAMF,OAAO,CAACG,QAAQ,EAAE;EACnC,MAAMC,SAAS,GAAC;IACZC,KAAK,EAACH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACvBC,KAAK,EAACL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACvBE,IAAI,EAACN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACrBG,WAAW,EAACP,IAAI,CAACI,GAAG,CAAC,aAAa;EACtC,CAAC;EACD,MAAMI,QAAQ,GAAC,MAAMC,KAAK,CAAC,8BAA8B,EAAC;IAC1DC,MAAM,EAAC,MAAM;IACbC,OAAO,EAAC;MACJ,cAAc,EAAC;IACnB,CAAC;IACDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACZ,SAAS;EACjC,CAAC,CAAC;EAEF,IAAG,CAACM,QAAQ,CAACO,EAAE,EAAC;IACZ,MAAM5B,IAAI,CAAC;MAAE6B,OAAO,EAAC;IAAsB,CAAC,EAAC;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EAC9D;AACA;AAAC,IAAAtB,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}