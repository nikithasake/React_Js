{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: 'counter',\n  //it can be any name\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++; //we still must not manipulate the existing state\n      //when we use Redux toolkit and its functions like createSlice,\n      //we can't accidentally manipulate the existing state\n      //bcse Redux toolkit internally uses another package called as imgur\n      //which will detect code like this and which will automatically clone the existing state.create\n      //a new state object,keep all the state which we are not editing and override the state which we\n      //are editing in an immutable way.\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !showCounter;\n    }\n  }\n});\n// const counterReducer=(state=initialState,action)=>{\n//     if(action.type===\"increment\"){\n//        return {\n//             counter:state.counter+1,\n//             // showCounter:state.showCounter\n//        };\n//     }\n//     if(action.type===\"increase\"){\n//         return {\n//              counter:state.counter+action.amount,\n//              showCounter:state.showCounter\n//         };\n//      }\n//     if(action.type===\"decrement\"){\n//         return {\n//             counter:state.counter-1,\n//             showCounter:state.showCounter\n//         };\n//     }\n//     if(action.type===\"toggle\"){\n//         return{\n//             showCounter:!state.showCounter,\n//             counter:state.counter\n//         }\n//     }\n//     return state;\n\n// }\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","store","counterReducer"],"sources":["C:/Users/nikit/Desktop/01-starting-project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState={counter:0,showCounter:true}\r\ncreateSlice({\r\n    name:'counter',//it can be any name\r\n    initialState,\r\n    reducers:{\r\n        increment(state){\r\n            state.counter++;//we still must not manipulate the existing state\r\n            //when we use Redux toolkit and its functions like createSlice,\r\n            //we can't accidentally manipulate the existing state\r\n            //bcse Redux toolkit internally uses another package called as imgur\r\n            //which will detect code like this and which will automatically clone the existing state.create\r\n            //a new state object,keep all the state which we are not editing and override the state which we\r\n            //are editing in an immutable way.\r\n        },\r\n        decrement(state){\r\n            state.counter--;\r\n        },\r\n        increase(state,action){\r\n            state.counter=state.counter+action.amount;\r\n        },\r\n        toggleCounter(state){\r\n            state.showCounter=!showCounter;\r\n        }\r\n    }\r\n})\r\n// const counterReducer=(state=initialState,action)=>{\r\n//     if(action.type===\"increment\"){\r\n//        return {\r\n//             counter:state.counter+1,\r\n//             // showCounter:state.showCounter\r\n//        };\r\n//     }\r\n//     if(action.type===\"increase\"){\r\n//         return {\r\n//              counter:state.counter+action.amount,\r\n//              showCounter:state.showCounter\r\n//         };\r\n//      }\r\n//     if(action.type===\"decrement\"){\r\n//         return {\r\n//             counter:state.counter-1,\r\n//             showCounter:state.showCounter\r\n//         };\r\n//     }\r\n//     if(action.type===\"toggle\"){\r\n//         return{\r\n//             showCounter:!state.showCounter,\r\n//             counter:state.counter\r\n//         }\r\n//     }\r\n//     return state;\r\n\r\n// }\r\nconst store=createStore(counterReducer);\r\n\r\nexport default store;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAC;EAACC,OAAO,EAAC,CAAC;EAACC,WAAW,EAAC;AAAI,CAAC;AAC/CH,WAAW,CAAC;EACRI,IAAI,EAAC,SAAS;EAAC;EACfH,YAAY;EACZI,QAAQ,EAAC;IACLC,SAAS,CAACC,KAAK,EAAC;MACZA,KAAK,CAACL,OAAO,EAAE,CAAC;MAChB;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC;;IACDM,SAAS,CAACD,KAAK,EAAC;MACZA,KAAK,CAACL,OAAO,EAAE;IACnB,CAAC;IACDO,QAAQ,CAACF,KAAK,EAACG,MAAM,EAAC;MAClBH,KAAK,CAACL,OAAO,GAACK,KAAK,CAACL,OAAO,GAACQ,MAAM,CAACC,MAAM;IAC7C,CAAC;IACDC,aAAa,CAACL,KAAK,EAAC;MAChBA,KAAK,CAACJ,WAAW,GAAC,CAACA,WAAW;IAClC;EACJ;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMU,KAAK,GAACd,WAAW,CAACe,cAAc,CAAC;AAEvC,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}