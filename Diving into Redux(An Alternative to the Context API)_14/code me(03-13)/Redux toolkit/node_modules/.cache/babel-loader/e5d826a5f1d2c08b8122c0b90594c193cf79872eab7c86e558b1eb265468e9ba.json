{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: 'counter',\n  //it can be any name\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++; //we still must not manipulate the existing state\n      //when we use Redux toolkit and its functions like createSlice,\n      //we can't accidentally manipulate the existing state\n      //bcse Redux toolkit internally uses another package called as imgur\n      //which will detect code like this and which will automatically clone the existing state.create\n      //a new state object,keep all the state which we are not editing and override the state which we\n      //are editing in an immutable way.\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {}\n  }\n});\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1\n      // showCounter:state.showCounter\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store"],"sources":["C:/Users/nikit/Desktop/01-starting-project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState={counter:0,showCounter:true}\r\n\r\ncreateSlice({\r\n    name:'counter',//it can be any name\r\n    initialState,\r\n    reducers:{\r\n        increment(state){\r\n            state.counter++;//we still must not manipulate the existing state\r\n            //when we use Redux toolkit and its functions like createSlice,\r\n            //we can't accidentally manipulate the existing state\r\n            //bcse Redux toolkit internally uses another package called as imgur\r\n            //which will detect code like this and which will automatically clone the existing state.create\r\n            //a new state object,keep all the state which we are not editing and override the state which we\r\n            //are editing in an immutable way.\r\n        },\r\n        decrement(state){\r\n            state.counter--;\r\n        },\r\n        increase(state,action){\r\n            state.counter=state.counter+action.amount\r\n        },\r\n        toggleCounter(state){\r\n\r\n        }\r\n    }\r\n})\r\nconst counterReducer=(state=initialState,action)=>{\r\n    if(action.type===\"increment\"){\r\n       return {\r\n            counter:state.counter+1,\r\n            // showCounter:state.showCounter\r\n       };\r\n    }\r\n    if(action.type===\"increase\"){\r\n        return {\r\n             counter:state.counter+action.amount,\r\n             showCounter:state.showCounter\r\n        };\r\n     }\r\n    if(action.type===\"decrement\"){\r\n        return {\r\n            counter:state.counter-1,\r\n            showCounter:state.showCounter\r\n        };\r\n    }\r\n    if(action.type===\"toggle\"){\r\n        return{\r\n            showCounter:!state.showCounter,\r\n            counter:state.counter\r\n        }\r\n    }\r\n    return state;\r\n\r\n}\r\nconst store=createStore(counterReducer);\r\n\r\nexport default store;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAC;EAACC,OAAO,EAAC,CAAC;EAACC,WAAW,EAAC;AAAI,CAAC;AAE/CH,WAAW,CAAC;EACRI,IAAI,EAAC,SAAS;EAAC;EACfH,YAAY;EACZI,QAAQ,EAAC;IACLC,SAAS,CAACC,KAAK,EAAC;MACZA,KAAK,CAACL,OAAO,EAAE,CAAC;MAChB;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC;;IACDM,SAAS,CAACD,KAAK,EAAC;MACZA,KAAK,CAACL,OAAO,EAAE;IACnB,CAAC;IACDO,QAAQ,CAACF,KAAK,EAACG,MAAM,EAAC;MAClBH,KAAK,CAACL,OAAO,GAACK,KAAK,CAACL,OAAO,GAACQ,MAAM,CAACC,MAAM;IAC7C,CAAC;IACDC,aAAa,CAACL,KAAK,EAAC,CAEpB;EACJ;AACJ,CAAC,CAAC;AACF,MAAMM,cAAc,GAAC,YAA6B;EAAA,IAA5BN,KAAK,uEAACN,YAAY;EAAA,IAACS,MAAM;EAC3C,IAAGA,MAAM,CAACI,IAAI,KAAG,WAAW,EAAC;IAC1B,OAAO;MACFZ,OAAO,EAACK,KAAK,CAACL,OAAO,GAAC;MACtB;IACL,CAAC;EACJ;;EACA,IAAGQ,MAAM,CAACI,IAAI,KAAG,UAAU,EAAC;IACxB,OAAO;MACFZ,OAAO,EAACK,KAAK,CAACL,OAAO,GAACQ,MAAM,CAACC,MAAM;MACnCR,WAAW,EAACI,KAAK,CAACJ;IACvB,CAAC;EACJ;EACD,IAAGO,MAAM,CAACI,IAAI,KAAG,WAAW,EAAC;IACzB,OAAO;MACHZ,OAAO,EAACK,KAAK,CAACL,OAAO,GAAC,CAAC;MACvBC,WAAW,EAACI,KAAK,CAACJ;IACtB,CAAC;EACL;EACA,IAAGO,MAAM,CAACI,IAAI,KAAG,QAAQ,EAAC;IACtB,OAAM;MACFX,WAAW,EAAC,CAACI,KAAK,CAACJ,WAAW;MAC9BD,OAAO,EAACK,KAAK,CAACL;IAClB,CAAC;EACL;EACA,OAAOK,KAAK;AAEhB,CAAC;AACD,MAAMQ,KAAK,GAAChB,WAAW,CAACc,cAAc,CAAC;AAEvC,eAAeE,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}