Working with Forms & User
=========================



Dealing with form submission and getting user input values
----------------------------------------------------------

SimpleInput.js
--------------
import { useRef, useState } from "react";

const SimpleInput = (props) => {

    const nameInputRef=useRef();
    const[enteredName,setEnteredName]=useState('');

    const nameInputChangeHandler=event=>{
        setEnteredName(event.target.value);
    }

    const formSubmissionHandler=event=>{
        event.preventDefault();
        console.log("from state:"+enteredName);
        const enteredValue=nameInputRef.current.value;
        console.log("from ref:"+enteredValue);
        //nameInputRef.current.value='';=>NOT IDEAL,DONT MANIPULATE THE DOM
        setEnteredName('');
    };
    return (
      <form onSubmit={formSubmissionHandler}>
        <div className='form-control'>
          <label htmlFor='name'>Your Name</label>
          <input ref={nameInputRef} type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} />
        </div>
        <div className="form-actions">
          <button>Submit</button>
        </div>
      </form>
    );
  };
  
  export default SimpleInput;
  

o/p:Dealing with form submission pic.js

Here the entered name is displayed in console by using ref and state.

and even when the user not entered any data in field it is show the

empty data in console.

How to resolve?
---------------

SimpleInput.js
--------------

if(enteredName.trim()=='')
{
   return;
}

o/p:Adding Basic Validation pic.js

if the user not entered any data in name field it is not showing
anything in console.

but how can the user know smtg is not happening when the user click
the submit button when the field is empty?

=>For this we need provide the error msg for users


SimpleInput.js
--------------

const[enteredNameIsValid,setEnteredNameIsValid]=useState(true);

if (enteredName.trim() == "") {
   setEnteredNameIsValid(false);
   return;
 }
setEnteredNameIsValid(true);

{!enteredNameIsValid && <p className="error-text">Name must not be empty</p>}
 

o/p:
Providing validation feedback.js 

Now it provides the msg to user to know smtg is not happening when the user click
the submit button when the field is empty


but when we use the below line

const[enteredNameIsValid,setEnteredNameIsValid]=useState(true);

it will treat as valid at initially?how can we resolve this?

SimpleInput.js
--------------

  const[enteredNameIsValid,setEnteredNameIsValid]=useState(false);
  const[enteredNameTouched,setEnteredNameTouched]=useState(false);

  const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;

  const nameInputClasses=nameInputIsInvalid ? 'form-control invalid' : 'form-control'

{nameInputIsInvalid && <p className="error-text">Name must not be empty</p>}


o/p:Handling was touched state pic

Now initially it not showing the error state or initially it is not treating
as valid but when i submit the button it is not doing anything bcse setEnteredName 
never changed the touchedstate then 

How can we resolve this?
------------------------

SimpleInput.js
--------------

setEnteredNameTouched(true);

o/p:Handling was touched state pic 

we could treat input filed has touched when the form is submitted.so the error 
msg has been displayed.

now its good on when the form is submitted then it will show error.but 
if i click in field and write smtg and remove which u have written
and click out there we know this is invalid bcse empty input is not valid.

Now if i click in there and out there and leave empty.i wanna see that error msg..

so therefore we might want to also validate on blure as its called blur.which
means when the input loses focus.

SimpleInput.js
--------------

<input onBlur={nameInputBlurHandler} ></input>


 const nameInputBlurHandler = (event) => {
   setEnteredNameTouched(true);
   if (enteredName.trim() == "") {
    setEnteredNameIsValid(false);
    return;
  }
  };

o/p:React to lost focus.js pic

Now if i click in field and write smtg and remove which u have written
and click out then error msg will be displayed

but if i write smtg after displaying the msg then the error wont remove

Refactoring and Deriving States
================================

SimpleInput.js
--------------
const nameInputChangeHandler = (event) => {
    setEnteredName(event.target.value);
    if (event.target.value.trim() !== "") {
        setEnteredNameIsValid(true);
        return;
      }
  };

=>Now if i click in field and write smtg and remove which u have written
and click out then error msg will be displayed

but if i write smtg after displaying the msg then the error will be removed.


Now we have a lot of code in this..so we actually dont necessarily have to manage
a seperate entered name as a valid state(enteredNameIsValid).

o/p:Refactoring and Deriving States.js



Managing the overall Form validity
==================================

SimpleInput.js
--------------
const[formIsValid,setFormIsValid]=useState(false);

  useEffect(()=>{
    if(enteredNameIsValid){
      setFormIsValid(true);
    }else{
      setFormIsValid(false);
    }
  },[enteredNameIsValid]);



=>The button will be disabled for invalid 

o/p:Form validity.js pic

SimpleInput.js
-------------

//const[formIsValid,setFormIsValid]=useState(false);
let formIsValid=false;
 
 if(enteredNameIsValid){
    formIsValid=true
 }

Another way for Form validity.js


overall SimpleInput.js
----------------------
import { useEffect, useRef, useState } from "react";

const SimpleInput = (props) => {
  // const nameInputRef = useRef();
  const [enteredName, setEnteredName] = useState("");
  // const[enteredNameIsValid,setEnteredNameIsValid]=useState(false);
  const[enteredNameTouched,setEnteredNameTouched]=useState(false);
  // const[formIsValid,setFormIsValid]=useState(false);

  const enteredNameIsValid=enteredName.trim() !== "";//data is there..true !true false
  const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;

  let formIsValid=false;
 
    if(enteredNameIsValid){
      formIsValid=true
    }
 


  const nameInputChangeHandler = (event) => {
    setEnteredName(event.target.value);
    // if (event.target.value.trim() !== "") {
    //     setEnteredNameIsValid(true);
    //     return;
    //   }
  };

  const nameInputBlurHandler = (event) => {
   setEnteredNameTouched(true);
  //  if (enteredName.trim() == "") {
  //   setEnteredNameIsValid(false);
  //   return;
  // }
  };


  const formSubmissionHandler = (event) => {
    event.preventDefault();
    setEnteredNameTouched(true);
    if (!enteredNameIsValid) {
      // setEnteredNameIsValid(false);
      return;
    }
    // setEnteredNameIsValid(true);
    console.log("from state:" + enteredName);
    // const enteredValue = nameInputRef.current.value;
    // console.log("from ref:" + enteredValue);
    //nameInputRef.current.value='';=>NOT IDEAL,DONT MANIPULATE THE DOM
    setEnteredName("");
    setEnteredNameTouched(false);
  };



  const nameInputClasses=nameInputIsInvalid ? 'form-control invalid' : 'form-control'
  return (
    <form onSubmit={formSubmissionHandler}>
      <div className={nameInputClasses}>
        <label htmlFor="name">Your Name</label>
        <input
          // ref={nameInputRef}
          type="text"
          id="name"
          onChange={nameInputChangeHandler}
          onBlur={nameInputBlurHandler}
          value={enteredName}
        />
        {nameInputIsInvalid && <p className="error-text">Name must not be empty</p>}
      </div>
      <div className="form-actions">
        <button disabled={!formIsValid} >Submit</button>
      </div>
    </form>
  );
};

export default SimpleInput;


Assignment
==========
=> Adding Email field pic 

SimpleInput.js
--------------
import { useEffect, useRef, useState } from "react";

const SimpleInput = (props) => {
  // const nameInputRef = useRef();
  const [enteredName, setEnteredName] = useState("");
  // const[enteredNameIsValid,setEnteredNameIsValid]=useState(false);
  const[enteredNameTouched,setEnteredNameTouched]=useState(false);
  // const[formIsValid,setFormIsValid]=useState(false);

  const [enteredEmail, setEnteredEmail] = useState("");
  const[enteredEmailTouched,setEnteredEmailTouched]=useState(false);

  const enteredEmailIsValid=enteredEmail.includes('@');
  const enteredEmailIsInValid=!enteredEmailIsValid && enteredEmailTouched;

  const enteredNameIsValid=enteredName.trim() !== "";//data is there..true !true false
  const nameInputIsInvalid=!enteredNameIsValid && enteredNameTouched;

  let formIsValid=false;
 
    if(enteredNameIsValid && enteredEmailIsValid){
      formIsValid=true
    }

  const nameInputChangeHandler = (event) => {
    setEnteredName(event.target.value);
    // if (event.target.value.trim() !== "") {
    //     setEnteredNameIsValid(true);
    //     return;
    //   }
  };

  const emailInputChangeHandler = (event) => {
    setEnteredEmail(event.target.value);
  }
  

  const nameInputBlurHandler = (event) => {
   setEnteredNameTouched(true);
  //  if (enteredName.trim() == "") {
  //   setEnteredNameIsValid(false);
  //   return;
  // }
  };

  
  const emailInputBlurHandler = (event) => {
    setEnteredEmailTouched(true);
  }


  const formSubmissionHandler = (event) => {
    event.preventDefault();
    setEnteredNameTouched(true);
    if (!enteredNameIsValid) {
      // setEnteredNameIsValid(false);
      return;
    }
    // setEnteredNameIsValid(true);
    console.log("from state:" + enteredName);
    console.log("from state:" + enteredEmail);
    // const enteredValue = nameInputRef.current.value;
    // console.log("from ref:" + enteredValue);
    //nameInputRef.current.value='';=>NOT IDEAL,DONT MANIPULATE THE DOM
    setEnteredName("");
    setEnteredNameTouched(false);

    setEnteredEmail("");
    setEnteredEmailTouched(false);
  };



  const nameInputClasses=nameInputIsInvalid ? 'form-control invalid' : 'form-control'
  
  const emailInputClasses=enteredEmailIsInValid ? 'form-control invalid' : 'form-control'
  return (
    <form onSubmit={formSubmissionHandler}>
      <div className={nameInputClasses}>
        <label htmlFor="name">Your Name</label>
        <input
          // ref={nameInputRef}
          type="text"
          id="name"
          onChange={nameInputChangeHandler}
          onBlur={nameInputBlurHandler}
          value={enteredName}
        />
        {nameInputIsInvalid && <p className="error-text">Name must not be empty</p>}
      </div>
      <div className={emailInputClasses}>
        <label htmlFor="email">Your E-Mail</label>
        <input
          type="email"
          id="email"
          onChange={emailInputChangeHandler}
          onBlur={emailInputBlurHandler}
          value={enteredEmail}
        />
        {enteredEmailIsInValid && <p className="error-text">please enter a valid email</p>}
      </div>
      <div className="form-actions">
        <button disabled={!formIsValid} >Submit</button>
      </div>
    </form>
  );
};

export default SimpleInput;


Adding a custom Input hook 
--------------------------

SimpleInput.js
-------------
  const{
    value:enteredName, 
    isValid:enteredNameIsValid,
    hasError:nameInputHasError,
    valueChangeHandler:nameChangedHandler,
    InputBlurHandler:nameBlurHandler,
    reset:resetNameInput
  }=useInput(value=>value.trim()!=='');

use-Input.js
------------
import { useState } from "react";
const useInput=(validateValue)=>{
    const [enteredValue, setEnteredValue] = useState("");
    const[isTouched,setIsTouched]=useState(false);

    const valueIsValid=validateValue(enteredValue);
    const hasError=!valueIsValid && isTouched;


    const valueChangeHandler = (event) => {
        setEnteredValue(event.target.value);
    }
    const InputBlurHandler = (event) => {
        setIsTouched(true);
    }

    const reset=()=>{
        setEnteredValue('');
        setIsTouched(false);
    }

    return {
        value:enteredValue,
        isValid:valueIsValid,
        hasError,
        InputBlurHandler,
        valueChangeHandler,
        reset
    }
};


export default useInput;

o/p:use custom hook for namefield


Re-using the custom hook
------------------------

o/p:use custom hook for emailfield


Applying our hook & knowledge to a new form
============================================


BasicForm.js
------------
import useInput from "../hooks/use-input";
const BasicForm = (props) => {

  const isNotEmpty=value=>value.trim()!=='';

  const{
    value:enteredFirstName, 
    isValid:enteredFirstNameIsValid,
    hasError:FirstNameInputHasError,
    valueChangeHandler:firstnameChangedHandler,
    InputBlurHandler:firstnameBlurHandler,
    reset:resetFirstNameInput
  }=useInput(isNotEmpty);

  const{
    value:enteredLastName, 
    isValid:enteredLastNameIsValid,
    hasError:LastNameInputHasError,
    valueChangeHandler:LastnameChangedHandler,
    InputBlurHandler:LastnameBlurHandler,
    reset:resetLastNameInput
  }=useInput(isNotEmpty);

   
  const{
    value:enteredEmail, 
    isValid:enteredEmailIsValid,
    hasError:emailInputHasError,
    valueChangeHandler:emailChangedHandler,
    InputBlurHandler:emailBlurHandler,
    reset:resetEmailInput
  }=useInput(value=>value.includes('@'));

  let formIsValid=false;
 
  if(enteredFirstNameIsValid && enteredLastNameIsValid && 
    enteredEmailIsValid){
    formIsValid=true
  }

  const formSubmissionHandler = (event) => {
    event.preventDefault();
    if (!formIsValid) {
      return;
    }
    console.log("firstname:" + enteredFirstName);
    console.log("lastname:"+enteredLastName);
    console.log("email:" + enteredEmail);
   
    resetFirstNameInput();
    resetLastNameInput();
    resetEmailInput();
  };

  

  const firstnameInputClasses=FirstNameInputHasError ? 'form-control invalid' : 'form-control'
  const lastnameInputClasses=LastNameInputHasError ? 'form-control invalid' : 'form-control'
  const emailInputClasses=emailInputHasError ? 'form-control invalid' : 'form-control'
    return (
      <form onSubmit={formSubmissionHandler}>
        <div className='control-group'>
          <div className={firstnameInputClasses}>
            <label htmlFor='name'>First Name</label>
            <input type='text' id='name' 
            value={enteredFirstName} 
            onChange={firstnameChangedHandler}
             onBlur={firstnameBlurHandler} />
             {FirstNameInputHasError && <p className="error-text">FirstName must not be empty</p>}
          </div>
          <div className={lastnameInputClasses}>
            <label htmlFor='name'>Last Name</label>
            <input type='text' id='name'   
            value={enteredLastName} 
            onChange={LastnameChangedHandler}
             onBlur={LastnameBlurHandler}/>
             {LastNameInputHasError && <p className="error-text">LastName must not be empty</p>}
          </div>
        </div>
        <div className={emailInputClasses}>
          <label htmlFor='name'>E-Mail Address</label>
          <input type='email' id='name'  
          value={enteredEmail} 
          onChange={emailChangedHandler}
          onBlur={emailBlurHandler} />
          {emailInputHasError && <p className="error-text">Email must not be empty</p>}
        </div>
        <div className='form-actions'>
          <button disabled={!formIsValid}>Submit</button>
        </div>
      </form>
    );
  };
  
  export default BasicForm;

o/p:use custom hook for BasicForm(another new form) pic


custom hook using useState(use-input.js)
----------------------------------------
import { useState } from 'react';

const useInput = (validateValue) => {
  const [enteredValue, setEnteredValue] = useState('');
  const [isTouched, setIsTouched] = useState(false);

  const valueIsValid = validateValue(enteredValue);
  const hasError = !valueIsValid && isTouched;

  const valueChangeHandler = (event) => {
    setEnteredValue(event.target.value);
  };

  const inputBlurHandler = (event) => {
    setIsTouched(true);
  };

  const reset = () => {
    setEnteredValue('');
    setIsTouched(false);
  };

  return {
    value: enteredValue,
    isValid: valueIsValid,
    hasError,
    valueChangeHandler,
    inputBlurHandler,
    reset
  };
};

export default useInput;


using useReducer()
===================

custom hook using useReducer(use-input.js)
------------------------------------------

import { useReducer } from "react";
    // const [enteredValue, setEnteredValue] = useState("");
    // const[isTouched,setIsTouched]=useState(false);

    const initialInputState={
        value:'',
        isTouched:false
    }
    const inputStateReducer=(state,action)=>{
        if(action.type=== "INPUT"){
            return {value:action.value,isTouched:state.isTouched};
        }
        if(action.type === "BLUR"){
            return{isTouched:true,value:state.value}
        }
        if(action.type === "RESET"){
            return{isTouched:false,value:''}
        }
        return inputStateReducer;
    };
    // const valueIsValid=validateValue(enteredValue);
    // const hasError=!valueIsValid && isTouched;

   const useInput=(validateValue)=>{
    const[inputState,dispatch]=useReducer(inputStateReducer,initialInputState)
   

   const valueIsValid=validateValue(inputState.value);
   const hasError=!valueIsValid && inputState.isTouched;

    const valueChangeHandler = (event) => {
        dispatch({type:'INPUT',value:event.target.value});
        // setEnteredValue(event.target.value);
    }
    const InputBlurHandler = (event) => {
        dispatch({type:'BLUR'});
        // setIsTouched(true);
    }

    const reset=()=>{
    //     setEnteredValue('');
    //     setIsTouched(false);
    dispatch({type:'RESET'});
    }

    return {
        value:inputState.value,
        isValid:valueIsValid,
        hasError,
        InputBlurHandler,
        valueChangeHandler,
        reset
    }
}

export default useInput;

o/p:use custom hook using useReducer(use-input.js) pic



















